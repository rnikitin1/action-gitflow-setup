name: 'Setup git flow'
description: 'Determine whether build and/or deploy and for which env (staging/production) depending on github event/action and target branch'
# TODO: implement inputs
# inputs:
  # production-branch:
  #   description: 'Defaults to master'
  #   required: false
  #   default: 'master'
  # staging-branch:
  #   description: 'Defaults to develop'
  #   required: false
  #   default: 'develop'
outputs:
  env:
    description: "Environment: 'Staging' or 'Production'"
    value: ${{ steps.determine.outputs.env }}
  build:
    description: "Build target: 'stage', 'prod' or 'none'"
    value: ${{ steps.determine.outputs.build }}
  deploy:
    description: "Deploy target: 'stage', 'prod' or 'none'"
    value: ${{ steps.determine.outputs.deploy }}
runs:
  using: "composite"
  steps:
    - name: Check yq lib
      id: get_sync_env
      uses: mikefarah/yq@master
      with:
        cmd: yq '.[] | select(.name == "sync *") |= sub("sync ", "")' ${{ github.event.pull_request.labels }}

    - id: determine
      run: |

        BRANCH_NAME="${{ github.head_ref || github.ref_name }}"
        IS_PUSH="${{ github.event_name == 'push' }}"
        IS_PR="${{ github.event_name == 'pull_request' }}"
        IS_PR_SYNC="${{ github.event.action == 'synchronize' || github.event.action == 'ready_for_review' || github.event.action == 'opened' }}"
        IS_WORKFLOW_DISPATCH="${{ github.event_name == 'workflow_dispatch' }}"
        IS_MASTER="${{ github.ref == 'refs/heads/master' }}"
        IS_MASTER_BASE="${{ github.base_ref == 'master' }}"
        IS_DEVELOP="${{ github.ref == 'refs/heads/develop' }}"
        IS_DEVELOP_BASE="${{ github.base_ref == 'develop' }}"
        IS_SYNC_STAGING="${{ contains(github.event.pull_request.labels.*.name, 'sync staging') }}"
        IS_SYNC_STAGING_PROD="${{ contains(github.event.pull_request.labels.*.name, 'sync staging prod') }}"
        IS_SYNC_BRANCH="${{ contains(github.event.pull_request.labels.*.name, 'sync branch') }}"

        echo "get_sync_env: ${{ steps.get_sync_env.outputs.result }}"
        echo "Github event name: ${{ github.event_name }}"
        echo "Github event action name: ${{ github.event.action }}"
        echo "Github ref: ${{ github.ref }}"
        echo "Github PR base ref: ${{ github.base_ref }}"
        echo "IS_SYNC_STAGING: $IS_SYNC_STAGING"
        echo "IS_SYNC_STAGING_PROD: $IS_SYNC_STAGING_PROD"

        if [[ $IS_PR == 'true' && $IS_PR_SYNC == 'true' ]]; then
          echo "::set-output name=env::Staging"

          if [[ $IS_SYNC_STAGING_PROD == 'true' ]]; then
            echo "::set-output name=build::prod"
          elif [[ $IS_SYNC_BRANCH == 'true' ]]; then
            echo "::set-output name=build::$BRANCH_NAME"
          else
            echo "::set-output name=build::stage"
          fi

          if [[ $IS_SYNC_STAGING == 'true' || $IS_SYNC_STAGING_PROD == 'true' ]]; then
            echo "::set-output name=deploy::stage"
          elif [[ $IS_SYNC_BRANCH == 'true' ]]; then
            echo "::set-output name=deploy::$BRANCH_NAME"
          else
            echo "::set-output name=deploy::none"
          fi

        elif [[ $IS_PUSH == 'true' ]]; then
          if [[ $IS_MASTER == 'true' ]]; then
            echo "::set-output name=env::Production"
            echo "::set-output name=build::prod"
            echo "::set-output name=deploy::prod"
          else
            echo "::set-output name=env::Staging"
            echo "::set-output name=build::none"
            echo "::set-output name=deploy::none"
          fi
        elif [[ $IS_WORKFLOW_DISPATCH == 'true' ]]; then
          echo "::set-output name=env::Staging"
          echo "::set-output name=build::stage"
          echo "::set-output name=deploy::stage"
        else
          echo "::set-output name=env::Staging"
          echo "::set-output name=build::none"
          echo "::set-output name=deploy::none"
        fi
      shell: bash

    - name: log results
      run: |
        echo "Environment: ${{ steps.determine.outputs.env }}"
        echo "Build target: ${{ steps.determine.outputs.build }}"
        echo "Deploy target: ${{ steps.determine.outputs.deploy }}"
      shell: bash
